# -*- coding: utf-8 -*-
"""WORK_250305_OneClassSVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LGFT4urhLEsaviT3K0zYnjmDXWiM7fjo
"""

import streamlit as st
import zipfile
import os
import pandas as pd
import plotly.graph_objects as go
from sklearn.svm import OneClassSVM
from sklearn.preprocessing import RobustScaler
import numpy as np

# Function to extract ZIP files
def extract_zip(zip_path, extract_dir="extracted_csvs"):
    if os.path.exists(extract_dir):
        for file in os.listdir(extract_dir):
            os.remove(os.path.join(extract_dir, file))
    else:
        os.makedirs(extract_dir)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    csv_files = [os.path.join(extract_dir, f) for f in os.listdir(extract_dir) if f.endswith('.csv')]
    return csv_files

# Function to extract features from a signal
def extract_features(signal):
    mean_val = np.mean(signal)
    std_val = np.std(signal)
    min_val = np.min(signal)
    max_val = np.max(signal)
    return [mean_val, std_val, min_val, max_val]

st.title("Laser Welding Anomaly Detection")

# Sidebar for OK data upload
with st.sidebar:
    st.header("Upload OK Data")
    uploaded_zip = st.file_uploader("Upload a ZIP file containing OK CSV files", type=["zip"])
    if uploaded_zip:
        with open("temp.zip", "wb") as f:
            f.write(uploaded_zip.getbuffer())
        csv_files = extract_zip("temp.zip")
        st.success(f"Extracted {len(csv_files)} CSV files")

        # Load OK data and extract features
        all_features = []
        for file in csv_files:
            df = pd.read_csv(file)
            signal = df.iloc[:, 0].values  # Assuming first column is the signal
            features = extract_features(signal)
            all_features.append(features)

        # Train One-Class SVM on OK data
        scaler = RobustScaler()
        X_train = scaler.fit_transform(all_features)
        model = OneClassSVM(kernel='rbf', gamma='auto', nu=0.1)
        model.fit(X_train)

        st.session_state['model'] = model
        st.session_state['scaler'] = scaler
        st.session_state['ok_data'] = csv_files
        st.success("Model trained on OK data!")

# Sidebar for new data upload
st.sidebar.header("Upload New Data")
new_data_file = st.sidebar.file_uploader("Upload a new CSV file", type=["csv"])
if new_data_file and 'model' in st.session_state:
    df_new = pd.read_csv(new_data_file)
    signal_new = df_new.iloc[:, 0].values  # Assuming first column is the signal
    new_features = extract_features(signal_new)

    # Normalize and predict anomaly
    new_features_scaled = st.session_state['scaler'].transform([new_features])
    prediction = st.session_state['model'].predict(new_features_scaled)
    status = "OK" if prediction[0] == 1 else "NOK"
    color = 'black' if status == "OK" else 'red'

    # Visualization
    fig = go.Figure()
    fig.add_trace(go.Scatter(y=signal_new, mode='lines', line=dict(color=color), name=f"New Data ({status})"))
    st.plotly_chart(fig)
    st.success(f"New data classified as {status}.")